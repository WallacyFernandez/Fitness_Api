# Generated by Django 5.1.6 on 2025-02-21 02:21

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RotinaTreino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateField()),
                ('data_fim', models.DateField()),
                ('objetivo', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'rotina_treino',
            },
        ),
        migrations.CreateModel(
            name='Nutricionista',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('data_nascimento', models.DateField()),
                ('telefone', models.CharField(max_length=20)),
                ('crn', models.CharField(max_length=20, unique=True)),
                ('especialidade', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(class)s_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'nutricionista',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Dieta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateField()),
                ('data_fim', models.DateField()),
                ('meta_calorica_diaria', models.IntegerField()),
                ('nutricionista', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dietas_prescritas', to='VivaFit_app.nutricionista')),
            ],
            options={
                'db_table': 'dieta',
            },
        ),
        migrations.CreateModel(
            name='Personal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('data_nascimento', models.DateField()),
                ('telefone', models.CharField(max_length=20)),
                ('cref', models.CharField(max_length=20, unique=True)),
                ('especialidade', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(class)s_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'personal',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Refeicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('CAFE_MANHA', 'Café da Manhã'), ('LANCHE_MANHA', 'Lanche da Manhã'), ('ALMOCO', 'Almoço'), ('LANCHE_TARDE', 'Lanche da Tarde'), ('JANTAR', 'Jantar'), ('CEIA', 'Ceia')], max_length=50)),
                ('horario', models.TimeField()),
                ('calorias', models.IntegerField()),
                ('dieta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refeicoes_relacionadas', to='VivaFit_app.dieta')),
            ],
            options={
                'db_table': 'refeicao',
            },
        ),
        migrations.AddField(
            model_name='dieta',
            name='refeicoes',
            field=models.ManyToManyField(related_name='dietas_relacionadas', to='VivaFit_app.refeicao'),
        ),
        migrations.CreateModel(
            name='Alimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('caloria_por_grama', models.DecimalField(decimal_places=2, max_digits=6)),
                ('porcao', models.DecimalField(decimal_places=2, max_digits=6)),
                ('proteinas', models.DecimalField(decimal_places=2, max_digits=6)),
                ('carboidratos', models.DecimalField(decimal_places=2, max_digits=6)),
                ('gorduras', models.DecimalField(decimal_places=2, max_digits=6)),
                ('refeicao', models.ManyToManyField(related_name='alimentos_relacionados', to='VivaFit_app.refeicao')),
            ],
            options={
                'db_table': 'alimento',
            },
        ),
        migrations.CreateModel(
            name='RefeicaoAlimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.DecimalField(decimal_places=2, max_digits=6)),
                ('alimento', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='VivaFit_app.alimento')),
                ('refeicao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='VivaFit_app.refeicao')),
            ],
            options={
                'db_table': 'refeicao_alimento',
            },
        ),
        migrations.AddField(
            model_name='refeicao',
            name='alimentos',
            field=models.ManyToManyField(related_name='refeicoes', through='VivaFit_app.RefeicaoAlimento', to='VivaFit_app.alimento'),
        ),
        migrations.CreateModel(
            name='Treino',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.CharField(choices=[('SEGUNDA', 'Segunda-feira'), ('TERCA', 'Terça-feira'), ('QUARTA', 'Quarta-feira'), ('QUINTA', 'Quinta-feira'), ('SEXTA', 'Sexta-feira'), ('SABADO', 'Sábado'), ('DOMINGO', 'Domingo')], max_length=20)),
                ('tipo_treino', models.CharField(max_length=100)),
                ('duracao', models.IntegerField()),
                ('calorias_estimadas', models.IntegerField()),
                ('rotina_treino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treinos', to='VivaFit_app.rotinatreino')),
            ],
            options={
                'db_table': 'treino',
            },
        ),
        migrations.CreateModel(
            name='Exercicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=255)),
                ('series', models.IntegerField()),
                ('repeticoes', models.IntegerField()),
                ('carga', models.DecimalField(decimal_places=2, max_digits=5)),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('treino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercicios', to='VivaFit_app.treino')),
            ],
            options={
                'db_table': 'exercicio',
            },
        ),
        migrations.CreateModel(
            name='Cliente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('data_nascimento', models.DateField()),
                ('telefone', models.CharField(max_length=20)),
                ('peso', models.DecimalField(decimal_places=2, max_digits=5)),
                ('altura', models.DecimalField(decimal_places=2, max_digits=3)),
                ('objetivo_principal', models.CharField(max_length=255)),
                ('nivel_atividade_fisica', models.CharField(max_length=50)),
                ('restricoes_alimentares', models.JSONField(default=list)),
                ('meta_peso', models.DecimalField(decimal_places=2, max_digits=5)),
                ('meta_calorias', models.IntegerField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(class)s_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'cliente',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='rotinatreino',
            name='cliente',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rotinas_treino', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='RelatorioTreinos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('personal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios_treinos', to='VivaFit_app.personal')),
                ('treinos_realizados', models.ManyToManyField(related_name='relatorios', to='VivaFit_app.treino')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios_treinos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'relatorio_treinos',
            },
        ),
        migrations.CreateModel(
            name='RelatorioConsumo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('calorias_totais', models.IntegerField()),
                ('meta_calorica', models.IntegerField()),
                ('nutricionista', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios_consumo', to='VivaFit_app.nutricionista')),
                ('refeicoes_diarias', models.ManyToManyField(related_name='relatorios', to='VivaFit_app.refeicao')),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios_consumo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'relatorio_consumo',
            },
        ),
        migrations.CreateModel(
            name='RegistroProgresso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('peso', models.DecimalField(decimal_places=2, max_digits=5)),
                ('imc', models.DecimalField(decimal_places=2, max_digits=4)),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registros_progresso', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'registro_progresso',
            },
        ),
        migrations.AddField(
            model_name='personal',
            name='clientes',
            field=models.ManyToManyField(related_name='personais', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='nutricionista',
            name='clientes',
            field=models.ManyToManyField(related_name='nutricionistas', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dieta',
            name='cliente',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dietas', to=settings.AUTH_USER_MODEL),
        ),
    ]
